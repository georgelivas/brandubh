.table {
 border: 2px solid white;
 height: 700px;
 width: 700px;
 min-width: 700px;
 border-collapse: collapse;
 margin-bottom: 400px;
 /*background-image: url("../images/backgrounds/lightwood.jpg");*/
 margin: 0 auto 0 auto;
}

.cell {
  height: 100px;
  width: 100px;
  min-width: 100px;
  border: 2px solid white;
  text-align: center;
  vertical-align: baseline;
}

.tr {
  border: 2px solid white;
}

.corner, .center {
    background-color: #9b9b9b;
    text-align: center;
    border: 2px solid white;
    vertical-align: baseline;
}

.piece {
  height: 100px;
  width: 100px;
}

.button {
    background-color: #4CAF50; /* Green */
    border: none;
    color: white;
    padding: 15px 32px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 16px;
}

.h1 {
  color: green;
}

.cellNum {
  color: white;
  text-align: center;
  min-width: 30px;
  height: 30px;
}
import classes from './board.css';

export { classes };
export default classes;
import React from 'react';
import { connect } from 'react-redux';

import { actions } from '../../redux-mvc';
import './styles';
import {
  kingImg,
  redImg,
  greyImg,
} from './images';

let Img = ({ piece, rowNum, colSymbol, dispatch }) => {
  if (!piece) {
    return <span />;
  }

  let imgStr = kingImg;
  if (piece.isKing) {
    imgStr = kingImg;
  } else if (piece.isRed) {
    imgStr = redImg;
  } else {
    imgStr = greyImg;
  }

  return (
    <img
      className="piece"
      src={imgStr}
      alt={imgStr}
      draggable="true"
      onDragStart={() => dispatch(actions.move(rowNum, colSymbol))}
    />
  );
};

Img.propTypes = {
  piece: React.PropTypes.Object,
  rowNum: React.PropTypes.string,
  colSymbol: React.PropTypes.string,
  dispatch: React.PropTypes.func,
};

Img = connect()(Img);

const cellClass = (rowNum, colSymbol) => {
  if ((rowNum === 1 || rowNum === 7) &&
  (colSymbol === 'A' || colSymbol === 'G')) {
    return 'corner';
  }

  if (rowNum === 4 && colSymbol === 'D') {
    return 'center';
  }

  return 'cell';
};

// const ColHeaders = () => (
//   <tr>
//     {[' ', 'A', 'B', 'C', 'D', 'E', 'F', 'G'].map((colSymbol) => (
//       <td className={'cellNum'} key={`col-head${colSymbol}`}>
//         {colSymbol}
//       </td>
//     ))}
//   </tr>
// );

const Cell = ({ rowNum, colSymbol, piece, dispatch }) => (
  <td
    className={cellClass(rowNum, colSymbol)}
    onTouchTap={() => { dispatch(actions.move(rowNum, colSymbol)); }}

    onDrop={() => { dispatch(actions.move(rowNum, colSymbol)); }}

    onDragOver={(ev) => ev.preventDefault()}
  >
    <Img piece={piece} rowNum={rowNum} colSymbol={colSymbol} />
  </td>
);

const C = connect()(Cell);

Cell.propTypes = {
  piece: React.PropTypes.Object,
  rowNum: React.PropTypes.string,
  colSymbol: React.PropTypes.string,
  dispatch: React.PropTypes.func,
};

const Board = ({ board }) => (
  board ? (
    <div>
      <table className="table">
        {[1, 2, 3, 4, 5, 6, 7].map((rowNum) => (
          <tr key={`board-row-${rowNum}`}>
            <C rowNum={rowNum} colSymbol={'A'} piece={board[rowNum - 1][0]} />
            <C rowNum={rowNum} colSymbol={'B'} piece={board[rowNum - 1][1]} />
            <C rowNum={rowNum} colSymbol={'C'} piece={board[rowNum - 1][2]} />
            <C rowNum={rowNum} colSymbol={'D'} piece={board[rowNum - 1][3]} />
            <C rowNum={rowNum} colSymbol={'E'} piece={board[rowNum - 1][4]} />
            <C rowNum={rowNum} colSymbol={'F'} piece={board[rowNum - 1][5]} />
            <C rowNum={rowNum} colSymbol={'G'} piece={board[rowNum - 1][6]} />

          </tr>
        ))}
      </table>
    </div>
  ) : (
    <div />
  )

);

Board.propTypes = {
  board: React.PropTypes.arrayOf(Object),
};

export default connect(({ board }) => ({ board }))(Board);
import Board from './board';

export { Board };
export default Board;
import React from 'react';
import { connect } from 'react-redux';
import { RadioButton, RadioButtonGroup } from 'material-ui/RadioButton';
import { actions } from '../../../redux-mvc';
import style from './style';

const CheckButton = ({ dispatch }) => (
  <div>
    <RadioButtonGroup
      name="shipSpeed"
      labelPosition="left"
      defaultSelected="grey"
      style={{ display: 'flex' }}
      onChange={(event, value) => dispatch(
        actions.selectGameMode({
          isPlayerVsPlayer: false,
          playerVsMachine: {
            playerColor: value,
          },
        })
      )}
    >
      <RadioButton
        value="GREY"
        label="Grey Team"
        style={style.checkButton}
      />
      <RadioButton
        value="RED"
        label="Red Team"
        style={style.checkButton}
      />
    </RadioButtonGroup>
  </div>
);

CheckButton.propTypes = {
  dispatch: React.PropTypes.func,
};

export default connect()(CheckButton);
import React from 'react';
import Dialog from 'material-ui/Dialog';
import FlatButton from 'material-ui/FlatButton';
import FloatingActionButton from 'material-ui/FloatingActionButton';
import Help from 'material-ui/svg-icons/action/help';
import { white } from 'material-ui/styles/colors';

import style from './style';
import Rules from './rules';

export default class HelpRules extends React.Component {
  state = {
    open: false,
  };

  handleOpen = () => {
    this.setState({ open: true });
  };

  handleClose = () => {
    this.setState({ open: false });
  };

  render() {
    const actions = [
      <FlatButton
        label="Close"
        primary
        keyboardFocused
        onTouchTap={this.handleClose}
      />,
    ];

    return (
      <div>
        <FloatingActionButton
          zDepth={5} style={style.fab}
          onTouchTap={this.handleOpen}
        >
          <Help color={white} />
        </FloatingActionButton>
        <Dialog
          title="How to play.."
          actions={actions}
          modal={false}
          open={this.state.open}
          onRequestClose={this.handleClose}
          autoScrollBodyContent
        >
          <Rules />
        </Dialog>
      </div>
    );
  }
}
import React, { PropTypes } from 'react';
import { connect } from 'react-redux';
import TextField from 'material-ui/TextField';
import { selectGameMode } from '../../../redux-mvc/actions';
import CheckButton from './check-box';
import style from './style';

const PlayerRegistration = ({
  singleBox,
  dispatch,
}) => {
  const handlePlayerVsMachineName = (event) => {
    dispatch(selectGameMode({
      isPlayerVsPlayer: false,
      playerVsMachine: {
        playerName: event.target.value,
      },
    }));
  };

  const handlePlayerVsPlayerRedName = (event) => {
    dispatch(selectGameMode({
      isPlayerVsPlayer: true,
      playerVsPlayer: {
        redPlayerName: event.target.value,
      },
    }));
  };

  const handlePlayerVsPlayerGreyName = (event) => {
    dispatch(selectGameMode({
      isPlayerVsPlayer: true,
      playerVsPlayer: {
        greyPlayerName: event.target.value,
      },
    }));
  };

  return (
    <div style={style.playerRegistration}>
      {
        singleBox &&
        <div>
          <div>
            <CheckButton style={{ width: '90%' }} />
          </div>
          <div>
            <TextField
              onChange={handlePlayerVsMachineName}
              style={{ width: '90%' }}
              floatingLabelText="Player Name"
            />
          </div>
        </div>
      }

      {
        !singleBox &&
        <div>
          <TextField
            onChange={handlePlayerVsPlayerGreyName}
            style={{ width: '90%' }}
            floatingLabelText="Grey Player Name"
          />
          <TextField
            onChange={handlePlayerVsPlayerRedName}
            style={{ width: '90%' }}
            floatingLabelText="Red Player Name"
          />
        </div>
      }
    </div>
  );
};

PlayerRegistration.propTypes = {
  singleBox: PropTypes.bool,
  dispatch: PropTypes.func,
};

export default connect()(PlayerRegistration);
import React from 'react';
import style from './style';
import {
  startingBoard,
  move,
  captureKing,
  captureVer,
  captureHor,
  tie,
  kingWins } from '../images';
import {
  kingImg,
  redImg,
  greyImg,
} from '../../board/images';

const Rules = () => (
  <div>
    <h3 style={style.h1}>Teams:</h3>

    <pre style={style.p}>
      &emsp; Attackers: 8 red pieces.<br />
      &emsp; Defenders: 4 white pieces, and a King.<br />
    </pre>
    <img src={redImg} alt={'black'} style={style.ruleImgRed} />
    <img src={greyImg} alt={'white'} style={style.ruleImgSmall} />
    <img src={kingImg} alt={'king'} style={style.ruleImgSmall} />

    <h3 style={style.h1}>Starting Piece Positions:</h3>

    <pre style={style.p}>
      &emsp; • The King is placed at the center of the 7X7 board surrounded
      <br />
      &emsp;&emsp;&emsp; on 4 sides (North, East, South, West) by his defenders.
      <br />
      &emsp; • The 8 attacking pieces are placed in pairs alongside the King's
      <br />
      &emsp;&emsp;&emsp; defenders.
    </pre>

    <img src={startingBoard} alt={'startingBoard'} style={style.ruleImg} />

    <h3 style={style.h1}>Moves:</h3>

    <pre style={style.p}>
      &emsp; • The attackers move first.<br />
      &emsp; • The pieces can only move along the same Row or Column<br />
      &emsp;&emsp;&emsp; by as many empty cells as the player wishes but,<br />
      &emsp; • Cannot, jump over other pieces.<br />
      &emsp; • Pieces can only occupy empty cells.<br />
      &emsp; • Only the King can occupy the center cell but cannot return<br />
      &emsp;&emsp;&emsp; to it once he has left it. He is also the only<br />
      &emsp;&emsp;&emsp; piece that can occupy the 4 corner cells.<br />
      &emsp; • Pieces can pass over the center cell only if it is empty.<br />
    </pre>

    <img src={move} alt={'move'} style={style.ruleImg} />

    <h3 style={style.h1}>Capture:</h3>

    <pre style={style.p}>
      &emsp; • Including the King, pieces are captured when surrounded <br />
      &emsp;&emsp;&emsp; either above and below OR to their right and left<br />
      &emsp;&emsp;&emsp; by enemy pieces. The corner cells function as <br />
      &emsp;&emsp;&emsp; enemy pieces. <br />
      &emsp; • To capture the King still at the center cell he must be <br />
      &emsp;&emsp;&emsp; surrounded N, E, S and W by attackers. At a cell <br />
      &emsp;&emsp;&emsp; next to the center cell the King must be surrounded
      <br />
      &emsp;&emsp;&emsp; by attackers on the remaining 3 sides.<br />
      &emsp; • More than 2 pieces can be captured simultaneously if surrounded
      <br />
      &emsp;&emsp;&emsp; on the same row or column by enemy pieces.<br />
    </pre>

    <img src={captureVer} alt={'captureVer'} style={style.ruleImgMedium} />
    <img src={captureKing} alt={'captureKing'} style={style.ruleImgMedium} />
    <img src={captureHor} alt={'startingBoard'} style={style.ruleImgMedium} />

    <h3 style={style.h1}>The Winner :</h3>

    <pre style={style.p}>
      &emsp; • Defenders: If the King reaches one of the 4 corner cells.<br />
      &emsp; • Attackers: If they capture the King.<br />
    </pre>

    <img src={captureKing} alt={'captureKing'} style={style.ruleImgMedium} />
    <img src={kingWins} alt={'kingWins'} style={style.ruleImgMedium} />


    <h3 style={style.h1}>Tie Conditions:</h3>

    <pre style={style.p}>
      &emsp; • Inability to make a legal move. All pieces are blocked.<br />
      &emsp; • Repetitive sequence of moves that do not lead to the capture
      <br />
      &emsp;&emsp;&emsp; of an enemy piece.<br />
      &emsp; • Player agreement.<br />
    </pre>

    <img src={tie} alt={'tie'} style={style.ruleImg} />

    <h3 style={style.h1}>Opening Moves:</h3>

    <pre style={style.p}>
      &emsp; • YouTube links.<br />
    </pre>
  </div>
);

export default Rules;
import React, { PropTypes } from 'react';
import { connect } from 'react-redux';
import RaisedButton from 'material-ui/RaisedButton';

import style from './style';
import { actions } from '../../../redux-mvc';

const StartGameButton = ({ dispatch }) => (
  <RaisedButton
    label="Start Game"
    labelStyle={{ fontSize: '33px', color: 'white' }}
    primary
    style={style.startGame}
    onTouchTap={() => dispatch(actions.newGame())}
  />
);
StartGameButton.propTypes = {
  dispatch: PropTypes.func,
};

export default connect(() => ({
}))(StartGameButton);
import { orange500 } from 'material-ui/styles/colors';

const style = {
  title: {
    color: 'white',
  },
  fab: {
    marginRight: 20,
    top: 'auto',
    right: 20,
    bottom: 20,
    left: 'auto',
    position: 'fixed',

  },
  text: {
    marginRight: 20,
    marginTop: 0,
    right: 120,
    bottom: 'auto',
    left: 'auto',
    position: 'absolute',
    color: 'white',
    underline: {
      borderColor: 'white',
    },
    floatingLabel: {
      color: 'white',
    },
    floatingLabelFocus: {
      color: orange500,
    },
  },
  icon: {
    margin: 12,
  },
  button: {
    marginRight: 20,
    top: 160,
    right: 20,
    bottom: 'auto',
    left: 'auto',
    position: 'absolute',
    color: 'white',
  },
  undoButton: {
    marginRight: 20,
    top: 200,
    right: 'auto',
    bottom: 'auto',
    left: 20,
    position: 'absolute',
    color: 'white',
  },
  appBarButton: {
    marginRight: 20,
    top: 30,
  },
  paper: {
    height: 400,
    width: 500,
    margin: '200px auto  0 auto',
    textAlign: 'center',
    opacity: '0.9',
  },
  startGame: {
    width: 550,
    height: 40,
    margin: 'auto',
    textAlign: 'center',
    fontFamily: 'Play, sans-serif',
    position: 'relative',
    bottom: 140,
    right: 25,
  },
  paperTitle: {
    WebkitTransition: 'all',
    msTransition: 'all',
    color: 'white',
    fontFamily: 'Iowan Old Style',
    fontSize: 30,
    marginBottom: 0,
  },
  checkButton: {
    marginTop: 20,
    marginRight: 30,
    marginBottom: 16,
    display: 'flex',
    width: '50%',
  },
  playerRegistration: {
    width: '100%',
    height: 300,
    margin: 'auto',
    position: 'relative',
    top: 5,
  },
  rules: {
    h1: {
      color: 'white',
    },
    p: {
      margin: '0 0 100px 0',
    },
  },
  logo: {
    paddingTop: '10px',
    paddingBottom: '10px',
    width: '490px',
  },
  ruleImg: {
    width: 300,
  },
  ruleImgSmall: {
    width: 100,
  },
  ruleImgMedium: {
    width: 200,
    paddingRight: 10,
  },
  ruleImgRed: {
    width: 100,
    paddingRight: 40,
  },
};

export default style;
import React, { PropTypes } from 'react';
import { Tabs, Tab } from 'material-ui/Tabs';
import SwipeableViews from 'react-swipeable-views';

import PlayerRegistration from './player-registration';

class PlayerTabs extends React.Component {

  constructor(props) {
    super(props);
    this.state = {
      slideIndex: 0,
    };
  }

  handleChange = (value) => {
    this.setState({
      slideIndex: value,
    });
  };

  render() {
    return (
      <div style={{ height: '100%' }}>
        <Tabs
          onChange={this.handleChange}
          value={this.state.slideIndex}
        >
          <Tab label="Player VS Machine" value={0} />
          <Tab label="Player VS Player" value={1} />
        </Tabs>
        <SwipeableViews
          index={this.state.slideIndex}
          onChangeIndex={this.handleChange}
        >
          <div>
            <PlayerRegistration singleBox />
          </div>
          <div>
            <PlayerRegistration />
          </div>
        </SwipeableViews>
      </div>
    );
  }
}

PlayerTabs.propTypes = {
  dispatch: PropTypes.func.isRequired,
};

export default PlayerTabs;
import React from 'react';
import style from './style';
import { logo } from '../images';

const Title = () => (
  <div>
    <img src={logo} alt={'Brandubh'} style={style.logo} />
    { /* <h1 style={{ marginBottom: 0 }}>BRANDUBH</h1> */ }
  </div>
);

export default Title;
import React, { PropTypes } from 'react';
import { connect } from 'react-redux';

import Paper from 'material-ui/Paper';

import style from './style';
import Title from './title';
import PlayerTabs from './tabs';
import StartGameButton from './start-game';
import HelpRules from './help-rules';

const WelcomePaper = () => (
  <div style={{ width: '100%', height: '100%', margin: '200px auto 0 auto' }}>
    <Paper style={style.paper} zDepth={5}>
      <Title />
      <PlayerTabs />
      <StartGameButton />
    </Paper>
    <HelpRules />
  </div>
);
WelcomePaper.propTypes = {
  winner: PropTypes.string,
};

export default connect((state) => ({
  gameNotStarted: !state.board,
  winner: state.winner,
}))(WelcomePaper);
import React from 'react';
import { connect } from 'react-redux';

import FloatingActionButton from 'material-ui/FloatingActionButton';
import Help from 'material-ui/svg-icons/action/help';
import { white } from 'material-ui/styles/colors';
import HelpRules from './help-rules';
import style from './style';

let open = true;
const FloatingButton = () => (

  <FloatingActionButton
    zDepth={5} style={style.fab}

  >
    <Help color={white} />
    <HelpRules open={open} />
  </FloatingActionButton>
);

export default connect(() => ({ }))(FloatingButton);
import Layout from './layout';

export default Layout;
import React, { PropTypes } from 'react';
import { connect } from 'react-redux';

import MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';
import darkBaseTheme from 'material-ui/styles/baseThemes/darkBaseTheme';
import getMuiTheme from 'material-ui/styles/getMuiTheme';

import { Board } from '../../components';

import WinnerDialog from '../utils/dialog';
import List from './list-component';
import WelcomePaper from './new-game/welcome-paper';
import logoImg from '../board/images';

const Layout = ({ dispatch, gameNotStarted, winner }) => (
  <MuiThemeProvider muiTheme={getMuiTheme(darkBaseTheme)}>
    <div style={{ width: '100%', height: '100%' }}>
      {gameNotStarted &&
        <div>
          <WelcomePaper dispatch={dispatch} />
        </div>
      }
      <br />
      <br />
      <logoImg />

      <div style={{ align: 'center' }}>
        {!gameNotStarted &&
          <div>
            <List />
          </div>
        }
        <Board />
      </div>

      <WinnerDialog
        open={!!winner}
        winner={winner}
      />
    </div>
  </MuiThemeProvider>
);

Layout.propTypes = {
  dispatch: PropTypes.func,
  gameNotStarted: PropTypes.bool,
  winner: PropTypes.string,
};

export default connect((state) => ({
  gameNotStarted: !state.board,
  winner: state.winner,
}))(Layout);
import React from 'react';
import Media from 'react-media';

import ListMenu from '../utils/list';
import InlineListMenu from '../utils/inline-list';

const List = () => (
  <div>
    <Media query="(max-width: 1200px)">
      {(matches) => (
        matches ? (
          <InlineListMenu />
        ) : (
          <ListMenu />
        )
      )}
    </Media>
  </div>
);

export default List;
import React, { PropTypes } from 'react';
import { connect } from 'react-redux';
import RaisedButton from 'material-ui/RaisedButton';

import style from './style';
import { actions } from '../../redux-mvc';

const StartGameButton = ({ dispatch }) => (
  <RaisedButton
    label="Start Game"
    labelStyle={{ fontSize: '33px', color: 'white' }}
    primary
    style={style.startGame}
    onTouchTap={() => dispatch(actions.newGame())}
  />
);
StartGameButton.propTypes = {
  dispatch: PropTypes.func,
};

export default connect(() => ({
}))(StartGameButton);
import { orange500 } from 'material-ui/styles/colors';

const style = {
  title: {
    color: 'white',
  },
  fab: {
    marginRight: 20,
    top: 'auto',
    right: 20,
    bottom: 20,
    left: 'auto',
    position: 'fixed',

  },
  text: {
    marginRight: 20,
    marginTop: 0,
    right: 120,
    bottom: 'auto',
    left: 'auto',
    position: 'absolute',
    color: 'white',
    underline: {
      borderColor: 'white',
    },
    floatingLabel: {
      color: 'white',
    },
    floatingLabelFocus: {
      color: orange500,
    },
  },
  icon: {
    margin: 12,
  },
  button: {
    marginRight: 20,
    top: 160,
    right: 20,
    bottom: 'auto',
    left: 'auto',
    position: 'absolute',
    color: 'white',
  },
  undoButton: {
    marginRight: 20,
    top: 200,
    right: 'auto',
    bottom: 'auto',
    left: 20,
    position: 'absolute',
    color: 'white',
  },
  appBarButton: {
    marginRight: 20,
    top: 30,
  },
  paper: {
    height: 400,
    width: 500,
    margin: '200px auto  0 auto',
    textAlign: 'center',
    opacity: '0.9',
  },
  startGame: {
    width: 550,
    height: 40,
    margin: 'auto',
    textAlign: 'center',
    fontFamily: 'Play, sans-serif',
    position: 'relative',
    bottom: 140,
    right: 25,
  },
  paperTitle: {
    WebkitTransition: 'all',
    msTransition: 'all',
    color: 'white',
    fontFamily: 'Iowan Old Style',
    fontSize: 30,
    marginBottom: 0,
  },
  checkButton: {
    marginTop: 20,
    marginRight: 30,
    marginBottom: 16,
    display: 'flex',
    width: '50%',
  },
  playerRegistration: {
    width: '100%',
    height: 300,
    margin: 'auto',
    position: 'relative',
    top: 5,
  },
  rules: {
    h1: {
      color: 'white',
    },
    p: {
      margin: '0 0 100px 0',
    },
  },
  logo: {
    paddingTop: '10px',
    paddingBottom: '10px',
    width: '490px',
  },
  ruleImg: {
    width: 300,
  },
  ruleImgSmall: {
    width: 100,
  },
  ruleImgMedium: {
    width: 200,
    paddingRight: 10,
  },
  ruleImgRed: {
    width: 100,
    paddingRight: 40,
  },
};

export default style;
.button {
    display: inline-block;
    border-radius: 4px;
    text-align: center;
    font-size: 28px;
    padding: 20px;
    width: 240px;
    transition: 0.5s;
    cursor: pointer;
    margin: 5px;
    background-color: white;
    color: black;
    border: 2px solid #f44336;
}

.button span {
    cursor: pointer;
    display: inline-block;
    position: relative;
    transition: 0.5s;
}

.button span:after {
    content: '»';
    position: absolute;
    opacity: 0;
    top: 0;
    right: -20px;
    transition: 0.0s;
    color: #FFFFFF;
}

.button:hover span {
    padding-right: 25px;
}

.button:hover span:after {
    opacity: 1;
    right: 0;
}


.button:hover {
    background-color: #f44336;
    color: white;
    transition: 0.2s;
}
import React from 'react';
import './button.css';

const Button = () => (
  <button className="button"><span>Start game!</span></button>
);
import React from 'react';
import Dialog from 'material-ui/Dialog';
import FlatButton from 'material-ui/FlatButton';
import { connect } from 'react-redux';
import { actions } from '../../redux-mvc';

const customContentStyle = {
  width: '100%',
  maxWidth: 'none',
};

class WinnerDialog extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      open: false,
      winner: props.winner,
    };
  }

  componentWillReceiveProps(nextProps) {
    this.setState({ open: nextProps.open });
    this.setState({ winner: nextProps.winner });
  }

  render() {
    const action = [
      <FlatButton
        label="Close"
        primary={true}
        onTouchTap={() => this.setState({ open: false })}
      />,
      <FlatButton
        label="Play again"
        primary={true}
        onTouchTap={() => {
          this.setState({ open: false });
          this.props.dispatch(actions.newGame());
        }}

      />,
    ];

    // const winnerName = winner.charAt(0).toUpperCase() + winner.slice(1);
    const title = this.props.winner + ' is the winner!';

    return (
      <Dialog
        title={title}
        actions={action}
        modal={true}
        contentStyle={customContentStyle}
        open={this.state.open}
      >
        Press close to remain on game or hit play again for one more round.
      </Dialog>
    );
  }
}

export default connect(({ board, winner }) => ({
  gameNotStarted: !board,
  winner,
}))(WinnerDialog);
import React from 'react';
import Dialog from 'material-ui/Dialog';
import FlatButton from 'material-ui/FlatButton';
import { connect } from 'react-redux';
import { actions } from '../../redux-mvc';

const customContentStyle = {
  width: '100%',
  maxWidth: 'none',
};

class WinnerDialog extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      open: false,
      winner: props.winner,
    };
  }

  componentWillReceiveProps(nextProps) {
    this.setState({ open: nextProps.open });
    this.setState({ winner: nextProps.winner });
  }

  render() {
    const action = [
      <FlatButton
        label="Close"
        primary={true}
        onTouchTap={() => this.setState({ open: false })}
      />,
      <FlatButton
        label="Play again"
        primary={true}
        onTouchTap={() => {
          this.setState({ open: false });
          this.props.dispatch(actions.newGame());
        }}

      />,
    ];

    // const winnerName = winner.charAt(0).toUpperCase() + winner.slice(1);
    const title = this.props.winner + ' is the winner!';

    return (
      <Dialog
        title={title}
        actions={action}
        modal={true}
        contentStyle={customContentStyle}
        open={this.state.open}
      >
        Press close to remain on game or hit play again for one more round.
      </Dialog>
    );
  }
}

export default connect(({ board, winner }) => ({
  gameNotStarted: !board,
  winner,
}))(WinnerDialog);

export default Button;
import React, { Component } from 'react'
import { Drawer, AppBar, MenuItem} from 'material-ui'
import baseTheme from 'material-ui/styles/baseThemes/lightBaseTheme'
import getMuiTheme from 'material-ui/styles/getMuiTheme'
import { Route, Router } from 'react-router'

class Header extends Component  {

  constructor(props){
    super(props);
    this.state = {
      open:false
    };
  }

  getChildContext() {
    return {muiTheme: getMuiTheme(baseTheme)};
  }

  handleToggle() {
    this.setState({open: !this.state.open});
  }

  handleClose() { this.setState({open: false}); }

  render() {
    return (
      <div>
        <Drawer docked={false} open={this.state.open}>
          <MenuItem onTouchTap={this.handleClose}>Menu Item 1</MenuItem>
          <MenuItem onTouchTap={this.handleClose}>Menu Item 2</MenuItem>
          <MenuItem onTouchTap={this.handleClose}>Menu Item 3</MenuItem>
        </Drawer>

        <AppBar title="App Bar Example"
          isInitiallyOpen={true}
          onLeftIconButtonTouchTap={this.handleToggle}
          onLeftIconButtonClick={this.handleToggle} />
        </div>
    );
}
    }

    Header.childContextTypes = {
  muiTheme: React.PropTypes.object.isRequired,
};

export default Header;
import Button from './button';

export {
  Button,
};
import React, { PropTypes } from 'react';
import { connect } from 'react-redux';

import { List, ListItem } from 'material-ui/List';
import { white } from 'material-ui/styles/colors';
import Undo from 'material-ui/svg-icons/content/undo';
import VideogameAsset from 'material-ui/svg-icons/hardware/videogame-asset';
import Error from 'material-ui/svg-icons/alert/error';
import Menu from 'material-ui/svg-icons/navigation/menu';
import Help from 'material-ui/svg-icons/action/help';

import { actions } from '../../redux-mvc';
import MobileTearSheetInline from './MobileTearSheetInline';
import Machine from '../../libs/brandubh/machine';

const InlineListMenu = ({ winner, dispatch }) => (
  <MobileTearSheetInline >
    <List
      style={{
        display: 'flex',
        flexDirection: 'row',
        padding: 0,
      }}
    >
      <ListItem
        primaryText="Undo"
        disabled={!!winner}
        rightIcon={
          <Undo color={white} />
        }
        onTouchTap={() => (!winner && dispatch(actions.undo()))}

        style={{ opacity: (winner ? 0.2 : 1) }}
      />
      <ListItem
        primaryText="New Game"
        rightIcon={
          <VideogameAsset color={white} />
        }
        onTouchTap={() => dispatch(actions.newGame())}
      />
      <ListItem
        primaryText="Hint" rightIcon={<Error color={white} />}
        onTouchTap={() => console.log(Machine.getRandomIntInclusive(1, 7))}
      />
      <ListItem
        primaryText="Start Menu"
        rightIcon={<Menu color={white} />}
        onTouchTap={() => dispatch(actions.gameNotStarted())}
      />
      <ListItem
        primaryText="Help"
        rightIcon={<Help color={white} />}
      />
    </List>
  </MobileTearSheetInline>
);
InlineListMenu.propTypes = {
  dispatch: PropTypes.func,
  winner: PropTypes.string,
};
console.log(Machine.coordinates);

export default connect((state) => ({
  gameNotStarted: !state.board,
  winner: state.winner,
}))(InlineListMenu);
import React, { PropTypes } from 'react';
import { connect } from 'react-redux';

import { List, ListItem } from 'material-ui/List';
import { white } from 'material-ui/styles/colors';
import Undo from 'material-ui/svg-icons/content/undo';
import VideogameAsset from 'material-ui/svg-icons/hardware/videogame-asset';
import Error from 'material-ui/svg-icons/alert/error';
import Menu from 'material-ui/svg-icons/navigation/menu';
import Help from 'material-ui/svg-icons/action/help';

import { actions } from '../../redux-mvc';
import MobileTearSheet from './MobileTearSheet';
import HelpRules from '../layout/new-game/help-rules';

const ListMenu = ({ winner, dispatch }) => (
  <MobileTearSheet >
    <List>
      <ListItem
        primaryText="Undo"
        disabled={!!winner}
        leftIcon={
          <Undo color={white} />
        }
        onTouchTap={() => (!winner && dispatch(actions.undo()))}

        style={{ opacity: (winner ? 0.2 : 1) }}
      />
      <ListItem
        primaryText="New Game"
        leftIcon={
          <VideogameAsset color={white} />
        }
        onTouchTap={() => dispatch(actions.newGame())}
      />
      <ListItem
        primaryText="Hint" leftIcon={<Error color={white} />}
      />
      <ListItem
        primaryText="Start Menu"
        leftIcon={<Menu color={white} />}
        onTouchTap={() => dispatch(actions.gameNotStarted())}
      />
      <ListItem
        primaryText="Help"
        leftIcon={<Help color={white} />}
        onTouchTap={HelpRules.handleClose}
      />
    </List>
  </MobileTearSheet>
);
ListMenu.propTypes = {
  dispatch: PropTypes.func,
  winner: PropTypes.string,
};

export default connect((state) => ({
  gameNotStarted: !state.board,
  winner: state.winner,
}))(ListMenu);
import React, { PropTypes } from 'react';

class MobileTearSheet extends React.Component {

  propTypes = {
    height: PropTypes.number,
    children: PropTypes.node,
  };

  defaultProps = {
    height: 260,
  };

  render() {
    const styles = {
      root: {
        float: 'right',
        marginTop: 0,
        marginBottom: 24,
        marginRight: 250,
        marginLeft: 0,
        width: 'auto',
        minWidth: 200,
        position: 'relative',
      },

      container: {
        border: 'solid 1px #d9d9d9',
        height: this.props.height,
        overflow: 'hidden',
      },

    };

    return (
      <div style={styles.root}>
        <div style={styles.container}>
          {this.props.children}
        </div>
      </div>
    );
  }
}

export default MobileTearSheet;
import React, { PropTypes } from 'react';

const styles = {
  root: {
    margin: '-30px auto 14px auto',
    width: '640px',
    minWidth: '640px',
    display: 'flex',
    flexDirection: 'row',
    padding: 0,
  },

  container: {
    border: 'solid 1px #d9d9d9',
    height: '50px',
    overflow: 'hidden',
    margin: '0 auto 0 auto',
  },

};

const MobileTearSheet = ({ children }) => (
  <div style={styles.root}>
    <div style={styles.container}>
      {children}
    </div>
  </div>
);

MobileTearSheet.propTypes = {
  children: PropTypes.node,
};

export default MobileTearSheet;
const RED = 'RED';
const GREY = 'GREY';

const Red = {
  color: RED,
  isGrey: false,
  isRed: true,
  isKing: false,
};

const Grey = {
  color: GREY,
  isGrey: true,
  isRed: false,
  isKing: false,
};

const King = {
  color: GREY,
  isGrey: true,
  isRed: false,
  isKing: true,
};

const Board = {
  create() {
    const board = [
      [null, null, null, null, null, null, null],
      [null, null, null, null, null, null, null],
      [null, null, null, null, null, null, null],
      [null, null, null, null, null, null, null],
      [null, null, null, null, null, null, null],
      [null, null, null, null, null, null, null],
      [null, null, null, null, null, null, null],
      [null, null, null, null, null, null, null],
    ];

    // Pieces starting posisions on Board

    board[0][3] = Red;
    board[1][3] = Red;
    board[2][3] = Grey;
    board[3][3] = King;
    board[4][3] = Grey;
    board[5][3] = Red;
    board[6][3] = Red;
    board[3][0] = Red;
    board[3][1] = Red;
    board[3][2] = Grey;
    board[3][4] = Grey;
    board[3][5] = Red;
    board[3][6] = Red;

    return board;
  },

  findAllEmptySlots(board, x, y) {
    const emptySlots = [];
    for (let j = y + 1; j < board[x].length && !board[x][j]; j++) {
      emptySlots.push({ x, y: j });
    }

    for (let j = y - 1; j >= 0 && !board[x][j]; j--) {
      emptySlots.push({ x, y: j });
    }

    for (let i = x + 1; i < board.length && !board[i][y]; i++) {
      emptySlots.push({ x: i, y });
    }

    for (let i = x - 1; i >= 0 && !board[i][y]; i--) {
      emptySlots.push({ x: i, y });
    }

    return emptySlots;
  },

  findAllPiecesOfColor(board, color) {
    const pieceLocation = [];

    for (let i = 0; i < board.length; i++) {
      for (let j = 0; j < board[i].length; j++) {
        if (Board.isColorAt(board, color, i, j)) {
          pieceLocation.push({ x: i, y: j });
        }
      }
    }

    return pieceLocation;
  },

  isGreyAt(board, x, y) {
    if (Board.isInBoard(x, y) &&
      !Board.isEmpty(board, x, y) && board[x][y].isGrey) {
      return true;
    }

    return false;
  },

  isColorAt(board, color, x, y) {
    // console.log(Board.findAllPieces(board, color));
    if (Board.isInBoard(x, y)
      && !Board.isEmpty(board, x, y)
      && board[x][y].color === color) {
      return true;
    }

    return false;
  },

  isCorner(x, y) {
    return (
      (x === 0 && y === 0) ||
      (x === 0 && y === 6) ||
      (x === 6 && y === 6) ||
      (x === 6 && y === 0)
    );
  },

  isCenter(x, y) {
    return (
      (x === 3 && y === 3)
    );
  },

  isCornerOrCenter(x, y) {
    return (
      Board.isCorner(x, y) || Board.isCenter(x, y)
    );
  },

  isNotStraight(fromX, fromY, toX, toY) {
    return (fromX === toX && fromY !== toY)
      || (fromX !== toX && fromY === toY);
  },

  isInBoard(x, y) {
    if (x >= 0 && x <= 6 && y >= 0 && y <= 6) {
      return true;
    }

    return false;
  },

  isEmpty(board, x, y) {
    if (Board.isInBoard(x, y) && board[x][y] === null) {
      return true;
    }

    return false;
  },

  isSameColor(board, x, y, allyX, allyY) {
    if (Board.isInBoard(x, y)
      && Board.isInBoard(allyX, allyY)
      && !Board.isEmpty(board, x, y)
      && !Board.isEmpty(board, allyX, allyY)
      && board[x][y].color === board[allyX][allyY].color) {
      return true;
    }

    return false;
  },

  isAlly(board, color, x, y) {
    if (Board.isCornerOrCenter(x, y)) {
      return true;
    }

    return Board.isColorAt(board, color, x, y);
  },

  isEnemy(board, color, x, y) {
    if (!Board.isInBoard(x, y) || Board.isCornerOrCenter(x, y)) {
      return true;
    }

    if (Board.isEmpty(board, x, y)) {
      return false;
    }

    return !Board.isColorAt(board, color, x, y);
  },

  kingPosition(board) {
    let x;
    let y;
    board.forEach((row, i) => row.forEach((piece, j) => {
      if (piece !== null && piece.isKing) {
        [x, y] = [i, j];
      }
    }));
    return { x, y };
  },

  isKingCaptured(board) {
    const { x, y } = Board.kingPosition(board);
    if (Board.isEnemy(board, Grey.color, x + 1, y)
      && Board.isEnemy(board, Grey.color, x - 1, y)
      && Board.isEnemy(board, Grey.color, x, y + 1)
      && Board.isEnemy(board, Grey.color, x, y - 1)) {
      return true;
    }

    return false;
  },

  isKingOnCorner(board) {
    const { x, y } = Board.kingPosition(board);

    if ((x === 0 && y === 0) ||
      (x === 0 && y === 6) ||
      (x === 6 && y === 6) ||
      (x === 6 && y === 0)) {
      return true;
    }

    return false;
  },

  isKingAt(board, x, y) {
    return Board.isInBoard(x, y)
      && !Board.isEmpty(board, x, y)
      && board[x][y].isKing;
  },

  capture(board, piece, x, y) {
    const color = piece.color;
    const captured = [];
    if (piece.isKing) {
      return captured;
    }

    if (!Board.isEmpty(board, x, y)) {
      return captured;
    }

    if (
      Board.isInBoard(x + 1, y)
      && Board.isAlly(board, color, x + 2, y)
      && Board.isEnemy(board, color, x + 1, y)
      && !Board.isKingAt(board, x + 1, y)
      && !Board.isKingAt(board, x + 2, y)
    ) {
      const capturedPiece = { x: x + 1, y };
      captured.push(capturedPiece);
    }

    if (
      Board.isInBoard(x - 1, y)
      && Board.isAlly(board, color, x - 2, y)
      && Board.isEnemy(board, color, x - 1, y)
      && !Board.isKingAt(board, x - 1, y)
      && !Board.isKingAt(board, x - 2, y)
    ) {
      const capturedPiece = { x: x - 1, y };
      captured.push(capturedPiece);
    }

    if (
      Board.isInBoard(x, y + 1)
      && Board.isAlly(board, color, x, y + 2)
      && Board.isEnemy(board, color, x, y + 1)
      && !Board.isKingAt(board, x, y + 1)
      && !Board.isKingAt(board, x, y + 2)
    ) {
      const capturedPiece = { x, y: y + 1 };
      captured.push(capturedPiece);
    }

    if (Board.isInBoard(x, y - 1)
      && Board.isAlly(board, color, x, y - 2)
      && Board.isEnemy(board, color, x, y - 1)
      && !Board.isKingAt(board, x, y - 1)
      && !Board.isKingAt(board, x, y - 2)
    ) {
      const capturedPiece = { x, y: y - 1 };
      captured.push(capturedPiece);
    }

    return captured;
  },

  move(board, fromX, fromY, toX, toY) {
    if (Board.isEmpty(board, fromX, fromY) || !Board.isEmpty(board, toX, toY)) {
      return board;
    }

    const piece = board[fromX][fromY];

    if (Board.isCornerOrCenter(toX, toY) && !piece.isKing) {
      return board;
    }

    if (piece.isKing && Board.isCenter(toX, toY)) {
      return board;
    }

    const availableSlots = Board.findAllEmptySlots(board, fromX, fromY);
    const to = availableSlots.find(({ x, y }) => (x === toX && y === toY));

    if (!to) {
      return board;
    }

    const capturedPieces = Board.capture(board, piece, toX, toY);

    const newBoard = [...board];
    newBoard[fromX] = [...board[fromX]];

    newBoard[toX] = [...board[toX]];
    newBoard[toX][toY] = piece;

    newBoard[fromX][fromY] = null;
    capturedPieces.forEach((cords) => {
      const { x, y } = cords;
      newBoard[x] = [...newBoard[x]];
      newBoard[x][y] = null;
    });

    return newBoard;
  },
};

export default Board;
import Board from './brandubh';

export default Board;
import _ from 'lodash';
import Board from './brandubh';

const Machine = {
  move(board, color) {
    const availablePieces = _.shuffle(Board.findAllPiecesOfColor(board, color));
    for (let i = 0; i < availablePieces.length; i++) {
      const { x: fromX, y: fromY } = availablePieces[i];
      const availableSlots =
        _.shuffle(Board.findAllEmptySlots(board, fromX, fromY));
      let slot = availableSlots.pop();
      while (slot) {
        const { x: toX, y: toY } = slot;
        const newBoard = Board.move(board, fromX, fromY, toX, toY);
        if (newBoard !== board) {
          return newBoard;
        }

        slot = availableSlots.pop();
      }

      return board;
    }
  },
};

export default Machine;
const MOVE = 'MOVE';
const UNDO = 'UNDO';
const NEW_GAME = 'NEW_GAME';
const GAME_NOT_STARTED = 'GAME_NOT_STARTED';
const SELECT_GAME_MODE = 'SELECT_GAME_MODE';
const MACHINE_MOVE = 'MACHINE_MOVE';

const move = (inX, inY) => {
  const x = parseInt(inX, 10) - 1;
  const y = inY.charCodeAt(0) - 65;

  return {
    type: MOVE,
    payload: {
      x,
      y,
    },
  };
};

const machineMove = () => ({
  type: MACHINE_MOVE,
});

const undo = () => ({
  type: UNDO,
});

const selectGameMode = (options) => {
  const {
    isPlayerVsPlayer = false,
    playerVsPlayer: {
      greyPlayerName,
      redPlayerName,
    } = {},
    playerVsMachine: {
      playerName,
      playerColor,
    } = {},
  } = options || {};

  const payload = {
    isPlayerVsPlayer,
  };

  if (greyPlayerName) {
    payload.playerVsPlayer = {
      greyPlayerName,
    };
  } else if (redPlayerName) {
    payload.playerVsPlayer = {
      redPlayerName,
    };
  } else if (playerName) {
    payload.playerVsMachine = {
      playerName,
    };
  } else if (playerColor) {
    payload.playerVsMachine = {
      playerColor,
    };
  }

  return {
    type: SELECT_GAME_MODE,
    payload,
  };
};

const gameNotStarted = () => ({
  type: GAME_NOT_STARTED,
});

const newGame = () => ({
  type: NEW_GAME,
});

export {
  MOVE,
  UNDO,
  NEW_GAME,
  GAME_NOT_STARTED,
  SELECT_GAME_MODE,
  MACHINE_MOVE,

  move,
  undo,
  newGame,
  gameNotStarted,
  selectGameMode,
  machineMove,
};
const DEBUG = true;

export default DEBUG;
import store from './store';
import reducer from './reducer';
import * as actions from './actions';

export {
  store,
  reducer,
  actions,
};
import {
  MOVE,
  UNDO,
  NEW_GAME,
  GAME_NOT_STARTED,
  SELECT_GAME_MODE,
  MACHINE_MOVE,
} from './actions';

import Board from '../libs/brandubh';

import Machine from '../libs/brandubh/machine';

const reducer = (state = { board: null }, action) => {
  switch (action.type) {
    case SELECT_GAME_MODE: {
      const {
        gameMode: {
          playerVsPlayer,
          playerVsMachine,
        } = {},
      } = state;
      const { payload } = action;
      return {
        ...state,
        gameMode: {
          ...payload,
          playerVsPlayer: {
            ...(playerVsPlayer || {}),
            ...(payload.playerVsPlayer || {}),
          },
          playerVsMachine: {
            ...(playerVsMachine || {}),
            ...(payload.playerVsMachine || {}),
          },
        },
      };
    }

    case GAME_NOT_STARTED: {
      return {
        board: null,
      };
    }

    case NEW_GAME: {
      if (!state.gameMode) {
        return state;
      }
      const {
        isPlayerVsPlayer,
        playerVsPlayer: {
          greyPlayerName,
          redPlayerName,
        } = {},
        playerVsMachine: {
          playerName,
          playerColor,
        } = {},
      } = state.gameMode;

      if (isPlayerVsPlayer && !(greyPlayerName && redPlayerName)) {
        return state;
      }

      if (!isPlayerVsPlayer && !(playerName && playerColor)) {
        return state;
      }

      let players;
      if (isPlayerVsPlayer) {
        players = {
          grey: greyPlayerName,
          red: redPlayerName,
          currentPlayer: redPlayerName,
        };
      } else if (playerColor === 'GREY') {
        players = {
          grey: playerName,
          red: 'Marvin',
          currentPlayer: 'Marvin',
        };
      } else {
        players = {
          grey: 'Marvin',
          red: playerName,
          currentPlayer: playerName,
        };
      }

      const newState = {
        players,
        board: Board.create(),
        winner: null,
        gameMode: { ...state.gameMode },
      };
      return {
        ...newState,
        previousState: {
          ...newState,
          currentMoveFrom: null,
        },
      };
    }

    case MACHINE_MOVE: {
      const {
        isPlayerVsPlayer,
      } = state.gameMode || {};

      if (isPlayerVsPlayer) {
        return state;
      }

      if (Board.isKingCaptured(state.board)) {
        return state;
      }

      if (Board.isKingOnCorner(state.board)) {
        return state;
      }

      if (state.players.currentPlayer !== 'Marvin') {
        return state;
      }

      const marvinColor = state.players.grey === 'Marvin' ? 'GREY' : 'RED';
      const board = Machine.move(state.board, marvinColor);
      if (state.board === board) {
        return state;
      }

      const { grey, red, currentPlayer } = state.players;

      const nextPlayer = (currentPlayer === grey) ? red : grey;

      const players = {
        ...state.players,
        currentPlayer: nextPlayer,
      };

      let winner = null;
      if (Board.isKingCaptured(board)) {
        winner = red;
      }

      if (Board.isKingOnCorner(board)) {
        winner = grey;
      }

      return {
        ...state,
        board,
        players,
        winner,
        currentMoveFrom: null,
        previousState: {
          ...state,
          currentMoveFrom: null,
        },
      };
    }

    case MOVE: {
      if (Board.isKingCaptured(state.board)) {
        return state;
      }

      if (Board.isKingOnCorner(state.board)) {
        return state;
      }

      const currentMoveFrom = state.currentMoveFrom;
      if (!currentMoveFrom) {
        return {
          ...state,
          currentMoveFrom: action.payload,
          previousState: state,
        };
      }

      const { x, y } = currentMoveFrom;
      const { grey, red, currentPlayer } = state.players;
      const isGrey = Board.isGreyAt(state.board, x, y);

      if ((currentPlayer === red && isGrey)
        || (currentPlayer === grey && !isGrey)) {
        return {
          ...state,
          currentMoveFrom: null,
        };
      }

      const board = Board.move(
        state.board,
        currentMoveFrom.x,
        currentMoveFrom.y,
        action.payload.x,
        action.payload.y
      );

      if (board !== state.board) {
        const nextPlayer = (currentPlayer === grey) ? red : grey;

        const players = {
          ...state.players,
          currentPlayer: nextPlayer,
        };

        let winner = null;
        if (Board.isKingCaptured(board)) {
          winner = red;
        }

        if (Board.isKingOnCorner(board)) {
          winner = grey;
        }

        return {
          ...state,
          board,
          players,
          winner,
          currentMoveFrom: null,
          previousState: {
            ...state,
            currentMoveFrom: null,
          },
        };
      }

      return {
        ...state,
        currentMoveFrom: null,
      };
    }

    case UNDO:
      return {
        ...state.previousState,
      };
    default:
      return state;
  }
};

export default reducer;
import { createStore } from 'redux';
import reducer from './reducer';
import {
  machineMove,
} from './actions';
import Board from '../libs/brandubh/brandubh';

import DEBUG from './debug';

const storeParams = [reducer];

if (DEBUG && typeof window.devToolsExtension === 'function') {
  storeParams.push(window.devToolsExtension());
}

const store = createStore(...storeParams);

setInterval(() => {
  const state = store.getState();
  const {
    board,
    players,
    gameMode,
  } = state || {};

  if (!gameMode || gameMode.isPlayerVsPlayer) {
    return;
  }

  if (Board.isKingCaptured(board)) {
    return;
  }

  if (Board.isKingOnCorner(board)) {
    return;
  }

  const { currentPlayer } = players;

  if (currentPlayer !== 'Marvin') {
    return;
  }

  store.dispatch(machineMove());
}, 1000);

export default store;
import muiTheme from './mui-theme';

export {
  muiTheme,
};
import getMuiTheme from 'material-ui/styles/getMuiTheme';
import injectTapEventPlugin from 'react-tap-event-plugin';
import { cyan500 } from 'material-ui/styles/colors';

injectTapEventPlugin();

const muiTheme = getMuiTheme({
  palette: {
    textColor: cyan500,
  },
  appBar: {
    height: 50,
  },
});

export default muiTheme;
.App {
  text-align: center;
 }

.App-logo {
  animation: App-logo-spin infinite 20s linear;
  height: 80px;
}

.App-header {
  background-color: #222;
  height: 150px;
  padding: 20px;
  color: white;
}

.App-intro {
  font-size: large;
}

.enterName {
  left: 20px;
}

.buttonStyle {
  color: white;
}

.pageTitle {
    text-decoration-color: white;
}

FlatButt: hover {
  color: white;
}

@keyframes App-logo-spin {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}
import React from 'react';

import './styles';
import './App.css';

import { Layout } from './components';

const App = () => (
  <Layout />
);

export default App;
// import React from 'react';
// import ReactDOM from 'react-dom';
// import App from './App';

it('renders without crashing', () => {
  // const div = document.createElement('div');
  // ReactDOM.render(<App />, div);
});
body {
  margin: 0;
  padding: 0;
  font-family: sans-serif;
  background-image: url(./components/board/images/backgrounds/pageBackground.png);
  background-size: '100%';
  background-repeat: no-repeat;
  background-position: center;
  height: '100%';
}
import React from 'react';
import ReactDOM from 'react-dom';
import { Provider } from 'react-redux';

import App from './App';
import './index.css';
import { store } from './redux-mvc';

ReactDOM.render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById('root')
);
