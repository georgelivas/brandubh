import kingImg from './pieces/king.png';
import redImg from './pieces/black.png';
import greyImg from './pieces/white.png';

export {
  kingImg,
  redImg,
  greyImg,
};
.wooden-table {
 border: 2px solid white;
 height: 700px;
 width: 700px;
 min-width: 700px;

 margin-bottom: 400px;
 /*background-image: url("../images/backgrounds/lightwood.jpg");*/
 margin: 50px auto 50px auto;
}

.cell {
  height: 100px;
  width: 100px;
  min-width: 100px;
  border: 2px solid white;
  text-align: center;
}

.tr {
  border: 2px solid white;
}

.corner, .center {
    /*background-image: url("../images/backgrounds/darkwood.jpg");*/
    /*background-color: #6b1111;*/
    background-color: #000000;
    text-align: center;
    border: 2px solid white;
}

.piece {
  height: 90px;
  width: 90px;
}

.button {
    background-color: #4CAF50; /* Green */
    border: none;
    color: white;
    padding: 15px 32px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 16px;
}

.h1 {
  color: green;
}

.cellNum {
  color: white;
  text-align: center;
  min-width: 30px;
  height: 30px;
}
import classes from './board.css';
export { classes };
import React from 'react';
import { connect } from 'react-redux';

import { actions } from '../../redux-mvc';
import './styles';
import {
  kingImg,
  redImg,
  greyImg,
} from './images';

let Img = ({ piece, rowNum, colSymbol, dispatch }) => {
  if (!piece) {
    return <span />;
  }

  let imgStr = kingImg;
  if (piece.isKing()) {
    imgStr = kingImg;
  } else if (piece.isRed()) {
    imgStr = redImg;
  } else {
    imgStr = greyImg;
  }

  return (
    <img
      className="piece"
      src={imgStr}
      alt={imgStr}
      draggable="true"
      onDragStart={() => dispatch(actions.move(rowNum, colSymbol))}
    />
  );
};

Img.propTypes = {
  piece: React.PropTypes.Object,
  rowNum: React.PropTypes.string,
  colSymbol: React.PropTypes.string,
  dispatch: React.PropTypes.func,
};

Img = connect()(Img);

const cellClass = (rowNum, colSymbol) => {
  if ((rowNum === 1 || rowNum === 7) &&
  (colSymbol === 'A' || colSymbol === 'G')) {
    return 'corner';
  }

  if (rowNum === 4 && colSymbol === 'D') {
    return 'center';
  }

  return 'cell';
};

const ColHeaders = () => (
  <tr>
    {[' ', 'A', 'B', 'C', 'D', 'E', 'F', 'G'].map((colSymbol) => (
      <td className={'cellNum'} key={`col-head${colSymbol}`}>
        {colSymbol}
      </td>
    ))}
  </tr>
);

const Cell = ({ rowNum, colSymbol, piece, dispatch }) => (
  <td
    className={cellClass(rowNum, colSymbol)}
    onDrop={() => { dispatch(actions.move(rowNum, colSymbol)); }}

    onDragOver={(ev) => ev.preventDefault()}
  >
    <Img piece={piece} rowNum={rowNum} colSymbol={colSymbol} />
  </td>
);

const C = connect()(Cell);

Cell.propTypes = {
  piece: React.PropTypes.Object,
  rowNum: React.PropTypes.string,
  colSymbol: React.PropTypes.string,
  dispatch: React.PropTypes.func,
};

const Board = ({ board }) => (
  board ? (
    <div>
      <table className="wooden-table">
        <ColHeaders />
        {[1, 2, 3, 4, 5, 6, 7].map((rowNum) => (
          <tr key={`board-row-${rowNum}`}>
            <td className={'cellNum'} children={rowNum} />
            <C rowNum={rowNum} colSymbol={'A'} piece={board[rowNum - 1][0]} />
            <C rowNum={rowNum} colSymbol={'B'} piece={board[rowNum - 1][1]} />
            <C rowNum={rowNum} colSymbol={'C'} piece={board[rowNum - 1][2]} />
            <C rowNum={rowNum} colSymbol={'D'} piece={board[rowNum - 1][3]} />
            <C rowNum={rowNum} colSymbol={'E'} piece={board[rowNum - 1][4]} />
            <C rowNum={rowNum} colSymbol={'F'} piece={board[rowNum - 1][5]} />
            <C rowNum={rowNum} colSymbol={'G'} piece={board[rowNum - 1][6]} />
            <td className={'cellNum'} children={rowNum} />
          </tr>
        ))}
        <ColHeaders />
      </table>
    </div>
  ) : (
    <div />
  )

);

Board.propTypes = {
  board: React.PropTypes.object,
};

export default connect(({ board }) => ({ board }))(Board);
import React, { PropTypes } from 'react';
import { connect } from 'react-redux';

import FloatingActionButton from 'material-ui/FloatingActionButton';
import Help from 'material-ui/svg-icons/action/help';
import { white } from 'material-ui/styles/colors';

import MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';
import darkBaseTheme from 'material-ui/styles/baseThemes/darkBaseTheme';
import getMuiTheme from 'material-ui/styles/getMuiTheme';

import '../../App.css';
import { Board } from '../../components';

import { muiTheme } from '../../styles';

import style from './style';
import { actions } from '../../redux-mvc';
import WelcomePaper from './welcome-paper';
import WinnerDialog from '../utils/dialog';

import ListMenu from '../utils/list';

const Layout = ({ dispatch, gameNotStarted, winner }) => (
  <MuiThemeProvider muiTheme={getMuiTheme(darkBaseTheme)}>
    <div style={{ width: '100%', height: '100%' }}>

      {gameNotStarted &&
        <WelcomePaper dispatch={dispatch} />
      }

      <br />
      <br />
      <redImg />
      <div style={{ align: 'center' }}>
        {!gameNotStarted &&
          <ListMenu />
        }
        <Board />
      </div>

      <WinnerDialog
        open={!!winner}
        winner={winner}
      />

      <div>
        <FloatingActionButton
          zDepth={5} style={style.fab}
          onTouchTap={() => { dispatch(actions.undo()); }}
        >
          <Help color={white} />
        </FloatingActionButton>
      </div>
    </div>
  </MuiThemeProvider>
);

Layout.propTypes = {
  dispatch: PropTypes.func,
  gameNotStarted: PropTypes.bool,
  winner: PropTypes.string,
};

export default connect((state) => ({
  gameNotStarted: !state.board,
  winner: state.winner,
}))(Layout);
import { orange500 } from 'material-ui/styles/colors';

const style = {
  title: {
    color: 'white',
  },
  fab: {
    marginRight: 20,
    top: 'auto',
    right: 20,
    bottom: 20,
    left: 'auto',
    position: 'fixed',

  },
  text: {
    marginRight: 20,
    marginTop: 0,
    right: 120,
    bottom: 'auto',
    left: 'auto',
    position: 'absolute',
    color: 'white',
    underline: {
      borderColor: 'white',
    },
    floatingLabel: {
      color: 'white',
    },
    floatingLabelFocus: {
      color: orange500,
    },
  },
  icon: {
    margin: 12,
  },
  button: {
    marginRight: 20,
    top: 160,
    right: 20,
    bottom: 'auto',
    left: 'auto',
    position: 'absolute',
    color: 'white',
  },
  undoButton: {
    marginRight: 20,
    top: 200,
    right: 'auto',
    bottom: 'auto',
    left: 20,
    position: 'absolute',
    color: 'white',
  },
  appBarButton: {
    marginRight: 20,
    top: 30,
  },
  paper: {
    height: 400,
    width: 500,
    margin: '200px auto  0 auto',
    textAlign: 'center',
    opacity: '0.9',
  },
  startGame: {
    width: 550,
    height: 50,
    margin: 'auto',
    textAlign: 'center',
    fontFamily: 'Play, sans-serif',
    position: 'relative',
    bottom: 200,
    right: 25,
  },
  paperTitle: {
    WebkitTransition: 'all',
    msTransition: 'all',
    color: 'white',
    fontFamily: 'Iowan Old Style',
    fontSize: 30,
  },
};

export default style;
import React, { PropTypes } from 'react';
import style from './style';

const Title = ({ winner }) => (
  <div style={style.paperTitle}>
    <h1>BRANDUBH</h1>
    <h3 style={{ marginTop: '240px' }} >{ winner }</h3>
  </div>
);
Title.propTypes = {
  winner: PropTypes.string,
};

export default Title;
import React, { PropTypes } from 'react';
import { connect } from 'react-redux';

import Paper from 'material-ui/Paper';
import RaisedButton from 'material-ui/RaisedButton';

import style from './style';
import Title from './title';
import { actions } from '../../redux-mvc';

const WelcomePaper = ({ winner, dispatch }) => (
  <div style={{ width: '100%', height: '100%', margin: '200px auto 0 auto' }}>
    <Paper style={style.paper} zDepth={5}>
      <Title winner={winner} />
      <RaisedButton
        label="Start Game"
        labelStyle={{ fontSize: '33px', color: 'white' }}
        primary
        style={style.startGame}
        onTouchTap={() => {
          dispatch(actions.newGame());
        }
        }
      />
    </Paper>
  </div>
);
WelcomePaper.propTypes = {
  dispatch: PropTypes.func,
  winner: PropTypes.string,
};

export default connect((state) => ({
  gameNotStarted: !state.board,
  winner: state.winner,
}))(WelcomePaper);
.button {
    display: inline-block;
    border-radius: 4px;
    text-align: center;
    font-size: 28px;
    padding: 20px;
    width: 240px;
    transition: 0.5s;
    cursor: pointer;
    margin: 5px;
    background-color: white;
    color: black;
    border: 2px solid #f44336;
}

.button span {
    cursor: pointer;
    display: inline-block;
    position: relative;
    transition: 0.5s;
}

.button span:after {
    content: 'Â»';
    position: absolute;
    opacity: 0;
    top: 0;
    right: -20px;
    transition: 0.0s;
    color: #FFFFFF;
}

.button:hover span {
    padding-right: 25px;
}

.button:hover span:after {
    opacity: 1;
    right: 0;
}


.button:hover {
    background-color: #f44336;
    color: white;
    transition: 0.2s;
}
import React from 'react';
import './button.css';

const Button = () => (
  <button className="button"><span>Start game!</span></button>
);

export default Button;
import React from 'react';
import Dialog from 'material-ui/Dialog';
import FlatButton from 'material-ui/FlatButton';
import { connect } from 'react-redux';
import { actions } from '../../redux-mvc';

const customContentStyle = {
  width: '100%',
  maxWidth: 'none',
};

class WinnerDialog extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      open: false,
      winner: props.winner,
    };
  }

  componentWillReceiveProps(nextProps) {
    this.setState({ open: nextProps.open });
    this.setState({ winner: nextProps.winner });
  }

  render() {
    const action = [
      <FlatButton
        label="Close"
        primary={true}
        onTouchTap={() => this.setState({ open: false })}
      />,
      <FlatButton
        label="Play again"
        primary={true}
        onTouchTap={() => {
          this.setState({ open: false });
          this.props.dispatch(actions.newGame());
        }}

      />,
    ];

    // const winnerName = winner.charAt(0).toUpperCase() + winner.slice(1);
    const title = this.props.winner + ' is the winner!';

    return (
      <Dialog
        title={title}
        actions={action}
        modal={true}
        contentStyle={customContentStyle}
        open={this.state.open}
      >
        Press close to remain on game or hit play again for one more round.
      </Dialog>
    );
  }
}

export default connect(({ board, winner }) => ({
  gameNotStarted: !board,
  winner,
}))(WinnerDialog);
import React, { Component } from 'react'
import { Drawer, AppBar, MenuItem} from 'material-ui'
import baseTheme from 'material-ui/styles/baseThemes/lightBaseTheme'
import getMuiTheme from 'material-ui/styles/getMuiTheme'
import { Route, Router } from 'react-router'

class Header extends Component  {

  constructor(props){
    super(props);
    this.state = {
      open:false
    };
  }

  getChildContext() {
    return {muiTheme: getMuiTheme(baseTheme)};
  }

  handleToggle() {
    this.setState({open: !this.state.open});
  }

  handleClose() { this.setState({open: false}); }

  render() {
    return (
      <div>
        <Drawer docked={false} open={this.state.open}>
          <MenuItem onTouchTap={this.handleClose}>Menu Item 1</MenuItem>
          <MenuItem onTouchTap={this.handleClose}>Menu Item 2</MenuItem>
          <MenuItem onTouchTap={this.handleClose}>Menu Item 3</MenuItem>
        </Drawer>

        <AppBar title="App Bar Example"
          isInitiallyOpen={true}
          onLeftIconButtonTouchTap={this.handleToggle}
          onLeftIconButtonClick={this.handleToggle} />
        </div>
    );
}
    }

    Header.childContextTypes = {
  muiTheme: React.PropTypes.object.isRequired,
};

export default Header;
import Button from './button';

export {
  Button,
};
import React from 'react';

class MobileTearSheet extends React.Component {

  propTypes = {
    height: React.PropTypes.number,
  };

  defaultProps = {
    height: 260,
  };

  render() {
    const styles = {
      root: {
        float: 'right',
        marginTop: 85,
        marginBottom: 24,
        marginRight: 100,
        marginLeft: 20,
        width: 'auto',
        minWidth: 200,
        position: 'relative',
      },

      container: {
        border: 'solid 1px #d9d9d9',
        height: this.props.height,
        overflow: 'hidden',
      },

    };

    return (
      <div style={styles.root}>
        <div style={styles.container}>
          {this.props.children}
        </div>
      </div>
    );
  }
}

export default MobileTearSheet;
import { Board } from './board';
import { Button } from './utils';
import Layout from './layout';

export {
  Board,
  Button,
  Layout,
};
class Piece {
  static type = 'PIECE';

  constructor(color, type = Piece.type) {
    this.type = type;
    this.color = color;
  }

  isRed = () => false;
  isGrey = () => false;
  isKing = () => false;

  toString() {
    return `${this.type} ${this.color} ${this.x} ${this.y}`;
  }
}

class Red extends Piece {
  static color = 'RED';

  constructor() {
    super(Red.color);
  }

  isRed = () => true;
  // eslint-disable-next-line
  oppositeColor = () => Grey.color;
}

class Grey extends Piece {
  static color = 'GREY';
  constructor() {
    super(Grey.color);
  }

  isGrey = () => true;
  oppositeColor = () => Red.color;
}

class King extends Piece {
  static color = 'GREY';
  static type = 'KING';

  constructor() {
    super(King.type);
  }

  isKing = () => true;
  isGrey = () => true;
  oppositeColor = () => Red.color;
}

const Board = {
  create() {
    const board = [
      [null, null, null, null, null, null, null],
      [null, null, null, null, null, null, null],
      [null, null, null, null, null, null, null],
      [null, null, null, null, null, null, null],
      [null, null, null, null, null, null, null],
      [null, null, null, null, null, null, null],
      [null, null, null, null, null, null, null],
      [null, null, null, null, null, null, null],
    ];

    // Pieces starting posisions on Board

    board[0][3] = new Red();
    board[1][3] = new Red();
    board[2][3] = new Grey();
    board[3][3] = new King();
    board[4][3] = new Grey();
    board[5][3] = new Red();
    board[6][3] = new Red();
    board[3][0] = new Red();
    board[3][1] = new Red();
    board[3][2] = new Grey();
    board[3][4] = new Grey();
    board[3][5] = new Red();
    board[3][6] = new Red();

    return board;
  },

  isGreyAt(board, x, y) {
    if (Board.isInBoard(x, y) &&
      !Board.isEmpty(board, x, y) && board[x][y].isGrey()) {
      return true;
    }
    return false;
  },

  isColorAt(board, color, x, y) {
    if (Board.isInBoard(x, y)
      && !Board.isEmpty(board, x, y)
      && board[x][y].color === color) {
      return true;
    }
    return false;
  },

  isCornerOrCenter(x, y) {
    return (
      (x === 0 && y === 0) ||
      (x === 0 && y === 6) ||
      (x === 6 && y === 6) ||
      (x === 6 && y === 0) ||
      (x === 3 && y === 3)
    );
  },

  isNotStraight(fromX, fromY, toX, toY) {
    return (fromX === toX && fromY !== toY)
      || (fromX !== toX && fromY === toY);
  },

  isInBoard(x, y) {
    if (x >= 0 && x <= 6 && y >= 0 && y <= 6) {
      return true;
    }
    return false;
  },

  isEmpty(board, x, y) {
    if (Board.isInBoard(x, y) && board[x][y] === null) {
      return true;
    }
    return false;
  },

  isSameColor(board, x, y, allyX, allyY) {
    if (Board.isInBoard(x, y)
      && Board.isInBoard(allyX, allyY)
      && !Board.isEmpty(board, x, y)
      && !Board.isEmpty(board, allyX, allyY)
      && board[x][y].color === board[allyX][allyY].color) {
      return true;
    }
    return false;
  },

  isAlly(board, color, x, y) {
    if (!Board.isInBoard(x, y) || Board.isCornerOrCenter(x, y)) {
      return true;
    }
    return Board.isColorAt(board, color, x, y);
  },

  isEnemy(board, color, x, y) {
    if (!Board.isInBoard(x, y) || Board.isCornerOrCenter(x, y)) {
      return true;
    }
    if (Board.isEmpty(board, x, y)) {
      return false;
    }
    return !Board.isColorAt(board, color, x, y);
  },

  kingPosition(board) {
    let x;
    let y;
    board.forEach((row, i) => row.forEach((piece, j) => {
      if (piece !== null && piece.isKing()) {
        [x, y] = [i, j];
      }
    }));
    return { x, y };
  },

  isKingCaptured(board) {
    const { x, y } = Board.kingPosition(board);
    if (Board.isEnemy(board, Grey.color, x + 1, y)
      && Board.isEnemy(board, Grey.color, x - 1, y)
      && Board.isEnemy(board, Grey.color, x, y + 1)
      && Board.isEnemy(board, Grey.color, x, y - 1)) {
      return true;
    }
    return false;
  },

  isKingOnCorner(board) {
    const { x, y } = Board.kingPosition(board);

    if ((x === 0 && y === 0) ||
      (x === 0 && y === 6) ||
      (x === 6 && y === 6) ||
      (x === 6 && y === 0)) {
      return true;
    }
    return false;
  },

  isKingAt(board, x, y) {
    return Board.isInBoard(x, y)
      && !Board.isEmpty(board, x, y)
      && board[x][y].isKing();
  },

  capture(board, piece, x, y) {
    const color = piece.color;
    const captured = [];
    if (piece.isKing()) {
      return captured;
    }

    if (!Board.isEmpty(board, x, y)) {
      return captured;
    }

    if (Board.isInBoard(x + 1, y)
      && Board.isAlly(board, color, x + 2, y)
      && Board.isEnemy(board, color, x + 1, y)
      && !Board.isKingAt(board, x + 1, y)) {
      const capturedPiece = { x: x + 1, y };
      captured.push(capturedPiece);
    }

    if (Board.isInBoard(x - 1, y)
      && Board.isAlly(board, color, x - 2, y)
      && Board.isEnemy(board, color, x - 1, y)
      && !Board.isKingAt(board, x - 1, y)) {
      const capturedPiece = { x: x - 1, y };
      captured.push(capturedPiece);
    }

    if (Board.isInBoard(x, y + 1)
      && Board.isAlly(board, color, x, y + 2)
      && Board.isEnemy(board, color, x, y + 1)
      && !Board.isKingAt(board, x, y + 1)) {
      const capturedPiece = { x, y: y + 1 };
      captured.push(capturedPiece);
    }

    if (Board.isInBoard(x, y - 1)
      && Board.isAlly(board, color, x, y - 2)
      && Board.isEnemy(board, color, x, y - 1)
      && !Board.isKingAt(board, x, y - 1)) {
      const capturedPiece = { x, y: y - 1 };
      captured.push(capturedPiece);
    }

    return captured;
  },

  move(board, fromX, fromY, toX, toY) {
    if (Board.isEmpty(board, fromX, fromY) || !Board.isEmpty(board, toX, toY)) {
      return board;
    }

    const piece = board[fromX][fromY];

    if (Board.isCornerOrCenter(toX, toY) && !piece.isKing()) {
      return board;
    }

    if (!Board.isNotStraight(fromX, fromY, toX, toY)) {
      return board;
    }

    const capturedPieces = Board.capture(board, piece, toX, toY);

    const newBoard = [...board];
    newBoard[fromX] = [...board[fromX]];

    newBoard[toX] = [...board[toX]];
    newBoard[toX][toY] = piece;

    newBoard[fromX][fromY] = null;
    capturedPieces.forEach((cords) => {
      const { x, y } = cords;
      newBoard[x] = [...newBoard[x]];
      newBoard[x][y] = null;
    });

    return newBoard;
  },
};

export default Board;
import Board from './brandubh';

export default Board;
const MOVE = 'MOVE';
const UNDO = 'UNDO';
const NEW_GAME = 'NEW_GAME';

const move = (inX, inY) => {
  const x = parseInt(inX, 10) - 1;
  const y = inY.charCodeAt(0) - 65;

  return {
    type: MOVE,
    payload: {
      x,
      y,
    },
  };
};

const undo = () => ({
  type: UNDO,
});

const newGame = (guestName, starterName) => ({
  type: NEW_GAME,
  payload: {
    host: {
      name: 'Marvin',
    },
    guest: {
      name: guestName,
    },
    currentPlayer: starterName,
  },
});

export {
  MOVE,
  UNDO,
  NEW_GAME,

  move,
  undo,
  newGame,
};
const DEBUG = true;

export default DEBUG;
import store from './store';
import reducer from './reducer';
import * as actions from './actions';

export {
  store,
  reducer,
  actions,
};
import {
  MOVE,
  UNDO,
  NEW_GAME,
} from './actions';

import Board from '../libs/brandubh';

export default (state = { board: null }, action) => {
  switch (action.type) {
    case NEW_GAME: {
      const newState = {
        players: action.payload,
        board: Board.create(),
        winner: null,
      };
      return {
        ...newState,
        previousState: {
          ...newState,
          currentMoveFrom: null,
        },
      };
    }

    case MOVE: {
      if (Board.isKingCaptured(state.board)) {
        return state;
      }

      if (Board.isKingOnCorner(state.board)) {
        return state;
      }

      const currentMoveFrom = state.currentMoveFrom;
      if (!currentMoveFrom) {
        return {
          ...state,
          currentMoveFrom: action.payload,
          previousState: state,
        };
      }

      const { x, y } = currentMoveFrom;
      const { host, guest, currentPlayer } = state.players;
      const isGrey = Board.isGreyAt(state.board, x, y);

      if ((currentPlayer !== guest.name && isGrey)
        || (currentPlayer === guest.name && !isGrey)) {
        return {
          ...state,
          currentMoveFrom: null,
        };
      }

      const board = Board.move(
        state.board,
        currentMoveFrom.x,
        currentMoveFrom.y,
        action.payload.x,
        action.payload.y
      );

      if (board !== state.board) {
        const nextPlayer = (currentPlayer === host.name) ?
        guest.name : host.name;

        const players = {
          ...state.players,
          currentPlayer: nextPlayer,
        };

        let winner = null;
        if (Board.isKingCaptured(board)) {
          winner = 'host';
        }

        if (Board.isKingOnCorner(board)) {
          winner = 'guest';
        }

        return {
          ...state,
          board,
          players,
          winner,
          currentMoveFrom: null,
          previousState: {
            ...state,
            currentMoveFrom: null,
          },
        };
      }

      return {
        ...state,
        currentMoveFrom: null,
      };
    }

    case UNDO:
      return {
        ...state.previousState,
      };
    default:
      return state;
  }
};
import { createStore } from 'redux';
import reducer from './reducer';

import DEBUG from './debug';

let store;

if (DEBUG && typeof window.devToolsExtension === 'function') {
  store = createStore(reducer, window.devToolsExtension());
} else {
  store = createStore(reducer);
}

export default store;
.App {
  text-align: center;
 }

.App-logo {
  animation: App-logo-spin infinite 20s linear;
  height: 80px;
}

.App-header {
  background-color: #222;
  height: 150px;
  padding: 20px;
  color: white;
}

.App-intro {
  font-size: large;
}

.enterName {
  left: 20px;
}

.buttonStyle {
  color: white;
}

.pageTitle {
    text-decoration-color: white;
}

FlatButt: hover {
  color: white;
}

@keyframes App-logo-spin {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}
import React, { Component } from 'react';
import { Layout } from './components';

class App extends Component {
  render() {
    return (
      <Layout />
    );
  }
}

export default App;
body {
  margin: 0;
  padding: 0;
  font-family: sans-serif;
  background-image: url(./components/board/images/backgrounds/pageBackground.png);
  background-size: '100%';
  background-repeat: no-repeat;
  background-position: center;
  min-height: '100%';
}
import React from 'react';
import ReactDOM from 'react-dom';
import { Provider } from 'react-redux';

import App from './App';
import './index.css';
import { store } from './redux-mvc';

ReactDOM.render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById('root')
);
import muiTheme from './mui-theme';

export {
  muiTheme,
};
import MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';
import getMuiTheme from 'material-ui/styles/getMuiTheme';
import darkBaseTheme from 'material-ui/styles/baseThemes/darkBaseTheme';
import injectTapEventPlugin from 'react-tap-event-plugin';
import { cyan500 } from 'material-ui/styles/colors';

injectTapEventPlugin();

const muiTheme = getMuiTheme({
  palette: {
    textColor: cyan500,
  },
  appBar: {
    height: 50,
  },
});

export default muiTheme;
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="shortcut icon" href="./src/favicon.ico">
    <title>Brandubh</title>
  </head>
  <body>
    <div id="root"  style="width: 100%; height: 100%;"}}></div>
  </body>
</html>
